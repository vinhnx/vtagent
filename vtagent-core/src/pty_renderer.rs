//! PTY output renderer using bubbletea-rs\n//!\n//! This module provides functionality to render PTY output in a terminal-like interface\n//! using the bubbletea TUI framework.\n\nuse anyhow::Result;\nuse bubbletea_rs::{renderer::Renderer, Cmd, Element, ElementMsg, Model, Program, RendererMsg, Subscription};\nuse crossterm::event::{Event, KeyCode, KeyEvent, KeyModifiers};\nuse std::sync::Arc;\nuse tokio::sync::Mutex;\n\n/// PTY output renderer\npub struct PtyRenderer {\n    output: String,\n    title: String,\n}\n\nimpl PtyRenderer {\n    /// Create a new PTY renderer\n    pub fn new(title: String) -> Self {\n        Self {\n            output: String::new(),\n            title,\n        }\n    }\n\n    /// Update the output to be rendered\n    pub fn update_output(&mut self, output: String) {\n        self.output = output;\n    }\n\n    /// Run the renderer in a bubbletea program\n    pub fn run(self) -> Result<()> {\n        let program = Program::new(self);\n        program.run()?;\n        Ok(())\n    }\n}\n\nimpl Model for PtyRenderer {\n    type Msg = Msg;\n\n    fn update(&mut self, msg: Self::Msg) -> Cmd<Self::Msg> {\n        match msg {\n            Msg::Quit => {\n                return Cmd::quit();\n            }\n            Msg::RendererMsg(renderer_msg) => match renderer_msg {\n                RendererMsg::Event(Event::Key(KeyEvent {\n                    code: KeyCode::Char('c'),\n                    modifiers: KeyModifiers::CONTROL,\n                    ..\n                })) => {\n                    return Cmd::quit();\n                }\n                RendererMsg::Event(Event::Key(KeyEvent {\n                    code: KeyCode::Esc, ..\n                })) => {\n                    return Cmd::quit();\n                }\n                _ => {}\n            },\n            Msg::ElementMsg(_) => {}\n        }\n        Cmd::none()\n    }\n\n    fn view(&self) -> Element<Self::Msg> {\n        let output_lines: Vec<&str> = self.output.lines().collect();\n        \n        bubbletea_widgets::container::container(\n            bubbletea_widgets::text::text(format!(\"{} - Press ESC or Ctrl+C to exit\", self.title))\n                .style(bubbletea_widgets::style::Style::default().fg(bubbletea_widgets::style::Color::Blue))\n        )\n        .push(\n            bubbletea_widgets::container::container(\n                bubbletea_widgets::text::text(output_lines.join(\"\\n\"))\n                    .style(bubbletea_widgets::style::Style::default())\n            )\n            .style(bubbletea_widgets::style::Style::default().bg(bubbletea_widgets::style::Color::Black))\n        )\n        .into()\n    }\n}\n\n#[derive(Debug, Clone)]\npub enum Msg {\n    Quit,\n    RendererMsg(RendererMsg),\n    ElementMsg(ElementMsg),\n}\n\nimpl From<RendererMsg> for Msg {\n    fn from(renderer_msg: RendererMsg) -> Self {\n        Msg::RendererMsg(renderer_msg)\n    }\n}\n\nimpl From<ElementMsg> for Msg {\n    fn from(element_msg: ElementMsg) -> Self {\n        Msg::ElementMsg(element_msg)\n    }\n}